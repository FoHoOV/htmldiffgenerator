from flask import Blueprint, jsonify
from flask import render_template, request, flash, redirect, url_for
from flask_login import current_user, logout_user
from sqlalchemy import and_

from samsteelsina.common.states import CommonStates
from samsteelsina.common.utils import only_xhr, disabled, get_page_number, is_float, validate_inputs, is_page_safe
from samsteelsina.database.enums import JWTRequest
from samsteelsina.database.models.delivery_time import DeliveryTime
from samsteelsina.database.models.product import Product
from samsteelsina.database.models.ticket_messages import TicketMessage
from samsteelsina.database.models.user import User
from samsteelsina.database.models.user_ticket import UserTicket
from samsteelsina.database.utils import UserRoles, DbStates, PurchasedProductStates, TicketSubjects, ProductUnits
from samsteelsina.users.forms import (LoginForm, SignupForm,
                                      ResetPasswordTokenForm, RequestResetPasswordForm,
                                      UpdateForm, UnlockAccountForm)
from samsteelsina.users.states import AccountStates
from samsteelsina.users.utils import AccountManager, EmailManager

users = Blueprint('users', __name__)

MAX_ITEMS_PER_PAGE = 6


@users.route('/account/entry', methods=['GET', 'POST'])
def account_entry():
    # AccountManager.login_dev("user", "usertest", True) #TODO: remove
    if current_user.is_authenticated:
        if current_user.is_admin:
            return redirect(url_for('admins.home', username=current_user.username))
        return redirect(url_for('users.home', username=current_user.username))
    else:
        login_form = LoginForm()
        signup_form = SignupForm()
        submitted_form_name = "none"
        if login_form.is_submitted():
            if login_form.login_form_name.data:
                submitted_form_name = login_form.login_form_name.data
            if submitted_form_name == 'login':
                if login_form.validate():
                    result = AccountManager.login(login_form)
                    if result == AccountStates.USER_LOGGED_IN:
                        flash(result, 'success')
                        next_page = request.args.get('next')
                        return redirect(next_page) if is_page_safe(next_page) else redirect(
                            url_for('users.home', username=current_user.username))
                    elif result == AccountStates.ADMIN_LOGGED_IN:
                        flash(result, 'success')
                        return redirect(url_for('admins.home', username=current_user.username))
                    elif result == AccountStates.REACHED_MAX_REQUESTS_FOR_LOGIN:
                        flash(result, 'warning t-15')
                        return redirect(url_for('users.unlock_account_request'))
                    else:
                        flash(result, 'warning')
                        return redirect(url_for('users.account_entry'))

        if signup_form.is_submitted():
            if signup_form.signup_form_name.data:
                submitted_form_name = signup_form.signup_form_name.data
            if submitted_form_name == 'signup':
                if signup_form.validate():
                    result = AccountManager.signup(signup_form)
                    if result == AccountStates.ACCOUNT_CREATED:
                        flash(result, 'success')
                    else:
                        flash(result, 'warning')
                    return redirect(url_for('users.account_entry'))
        # TODO: check if submited form name actually works
        return render_template('account/users/entry/entry.html', webpage_title="حساب کاربری", login_form=login_form,
                               signup_form=signup_form, submitted_form_name=submitted_form_name)


@users.route('/account/user')
@users.route('/account/user/home')
@AccountManager.login_required(roles=[UserRoles.USER])
def home():
    return render_template('account/users/home/home.html', webpage_title='حساب شما')


@users.route('/account/user/update', methods=['GET', 'POST'])
@AccountManager.login_required(roles=[UserRoles.USER])
def update_account():
    update_account_form = UpdateForm()
    if update_account_form.validate_on_submit():
        if AccountManager.update_account(update_account_form):
            flash('حساب کاربری شما با موفقیت به روز رسانی شد', "success")
            return redirect(url_for('users.update_account', username=current_user.username))
        flash(AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS, "warning")
        return redirect(url_for('users.update_account', username=current_user.username))
    if request.method == "GET":
        update_account_form.username.data = current_user.username
        update_account_form.email.data = current_user.email
        update_account_form.phone_number.data = current_user.phone_number
        update_account_form.post_code.data = current_user.post_code
        update_account_form.address.data = current_user.address
    return render_template('account/users/update/update.html', UserRoles=UserRoles, webpage_title='حساب شما - به روز رسانی',
                           update_form=update_account_form)


@users.route('/account/user/messages')
@AccountManager.login_required(roles=[UserRoles.USER])
def account_user_messages():
    request_xhr_key = request.headers.get('X-Requested-With')
    messages = current_user.get_unread_messages(MAX_ITEMS_PER_PAGE, get_page_number())
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if messages:
            return jsonify({'body': render_template('account/users/messages/messages-ajax.html',
                                                    messages=messages),
                            'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                                          paginated_object=messages,
                                                          url="users.account_user_messages",
                                                          ajax=True)})
        return jsonify({'body': CommonStates.PAGE_DOESNT_EXIST})
    if not messages:
        messages = []
    return render_template('account/users/messages/messages.html', webpage_title='حساب شما - پیام ها',
                           messages=messages)


@users.route('/account/user/cart')
@AccountManager.login_required(roles=[UserRoles.USER])
@disabled
def user_cart():
    request_xhr_key = request.headers.get('X-Requested-With')
    user_cart_items = current_user.get_my_cart(MAX_ITEMS_PER_PAGE, get_page_number())
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if len(user_cart_items.items) != 0:
            return jsonify({'body': render_template('account/users/my-cart/my-cart-ajax.html',
                                                    ENOUGH_AVAILABLE=DbStates.ENOUGH_AVAILABLE,
                                                    calculate_price_function=Product.calculate_price,
                                                    user_cart_items=user_cart_items),
                            'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                                          url='users.user_cart',
                                                          paginated_object=user_cart_items,
                                                          ajax=True)})
        return jsonify({'body': CommonStates.PAGE_DOESNT_EXIST})
    return render_template('account/users/my-cart/my-cart.html', webpage_title='حساب شما - سبد خرید',
                           calculate_price_function=Product.calculate_price,
                           ENOUGH_AVAILABLE=DbStates.ENOUGH_AVAILABLE,
                           available_delivery_times=DeliveryTime.get_available_delivery_times(),
                           user_cart_items=user_cart_items)


@users.route('/account/user/cart/edit', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
@disabled
def update_cart():
    if current_user.has_reached_max_cart_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS
    cart_id = request.json.get('cart_id')
    new_amount = request.json.get('new_amount')
    new_unit = request.json.get('new_unit')
    if (cart_id and isinstance(cart_id, str) and cart_id.isdigit() and new_amount and isinstance(new_amount, str)
            and isinstance(new_unit, str) and new_unit):
        if new_amount.replace('.', '', 1).isdigit():
            return AccountManager.update_cart_by_id(int(cart_id), float(new_amount), new_unit)
    return CommonStates.DATA_CORRUPTED


@users.route('/account/user/cart/remove', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
@disabled
def remove_from_cart():
    if current_user.has_reached_max_cart_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS
    cart_id = request.json.get('cart_id')
    if cart_id and (isinstance(cart_id, int) or (isinstance(cart_id, str) and cart_id.isdigit())):
        return AccountManager.remove_cart_by_id(cart_id)
    return CommonStates.DATA_CORRUPTED


@users.route('/account/user/purchases')
@AccountManager.login_required(roles=[UserRoles.USER])
@disabled
def account_purchase_history():
    request_xhr_key = request.headers.get('X-Requested-With')
    purchased_products = current_user.get_purchase_history(MAX_ITEMS_PER_PAGE, get_page_number())
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if len(purchased_products.items) > 0:
            return jsonify({'body': render_template('account/users/purchase-history/purchase-history-ajax.html',
                                                    purchased_products=purchased_products,
                                                    purchase_states=PurchasedProductStates),
                            'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                                          url="users.account_purchase_history",
                                                          paginated_object=purchased_products,
                                                          ajax=True)
                            })
        return jsonify({'body': CommonStates.PAGE_DOESNT_EXIST})
    return render_template('account/users/purchase-history/purchase-history.html', webpage_title='حساب شما - خرید های قبلی',
                           purchased_products=purchased_products, purchase_states=PurchasedProductStates)


def show_user_tickets():
    request_xhr_key = request.headers.get('X-Requested-With')
    sent_tickets = current_user.get_sent_tickets(MAX_ITEMS_PER_PAGE, get_page_number())
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if sent_tickets:
            return jsonify({'body': render_template('account/users/ticket/sent-tickets-ajax.html',
                                                    ticket_subjects=TicketSubjects.get_subjects_as_list(),
                                                    sent_tickets=sent_tickets),
                            'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                                          url='users.ticket',
                                                          paginated_object=sent_tickets,
                                                          ajax=True)})
        return jsonify({'body': CommonStates.PAGE_DOESNT_EXIST})
    return render_template('account/users/ticket/ticket.html', ticket_subjects=TicketSubjects.get_subjects_as_list(),
                           sent_tickets=sent_tickets,
                           webpage_title='تیکت')


def show_ticket_messages(page_number: int):
    # todo: use alternative_ticket_id
    request_xhr_key = request.headers.get('X-Requested-With')
    ticket_id = request.args.get('ticket_id', None)
    if not validate_inputs((ticket_id, str, True)):
        ticket_id = -1
    else:
        ticket_id = int(ticket_id)
    if ticket_id < 0:
        ticket_messages_query = None
    else:
        ticket_messages_query = (
            TicketMessage.query
                .join(UserTicket, aliased=True)
                .filter(and_(UserTicket.id == ticket_id, UserTicket.user_id == current_user.id, UserTicket.is_deleted == False))
                .order_by(TicketMessage.id.desc())
                .paginate(page=page_number, per_page=MAX_ITEMS_PER_PAGE, error_out=False))
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if not ticket_messages_query:
            return CommonStates.PAGE_DOESNT_EXIST
        return jsonify(
            {'body': render_template('account/users/ticket/ticket-messages-ajax.html',
                                     ticket_messages=ticket_messages_query),
             'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                           paginated_object=ticket_messages_query,
                                           url="users.ticket",
                                           ajax=True,
                                           kwargs={"ticket_id": ticket_id, "ticket_messages": "ticket_messages_query"},
                                           )
             }
        )

    else:
        return render_template('account/users/ticket/ticket.html', ticket_subjects=TicketSubjects.get_subjects_as_list(),
                               sent_tickets=current_user.get_sent_tickets(MAX_ITEMS_PER_PAGE, get_page_number()),
                               webpage_title='تیکت', ticket_messages=ticket_messages_query, ticket_id=ticket_id)


@users.route('/account/user/ticket')
@AccountManager.login_required(roles=[UserRoles.USER])
def ticket():
    ticket_message_page_number = get_page_number("messages_page_number", return_none_if_undefined=True)
    if ticket_message_page_number:
        return show_ticket_messages(ticket_message_page_number)
    else:
        return show_user_tickets()


@users.route('/account/user/ticket/send', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
def send_ticket():
    if current_user.has_reached_max_sent_tickets(True):
        return jsonify({'result': AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS})
    ticket_id = request.json.get('ticket_id')
    description = request.json.get('description')
    if validate_inputs((description, str)):
        if validate_inputs((ticket_id, str, True)):
            return jsonify({'result': AccountManager.append_to_ticket(int(ticket_id), description)})
        else:
            subject = request.json.get('subject')
            random_purchase_id = request.json.get('purchase_id')
            if (subject and random_purchase_id) and isinstance(subject, str) and isinstance(random_purchase_id, str):
                if not TicketSubjects.is_subject_valid(subject):
                    return jsonify(result=CommonStates.DATA_CORRUPTED)
                res = AccountManager.send_ticket(subject, random_purchase_id, description)
                if res == CommonStates.NO_RESULTS:
                    return jsonify(result=CommonStates.NO_RESULTS)
                return jsonify({'result': CommonStates.SUCCESS,
                                'ticket_id': res})
    return jsonify({'result': CommonStates.DATA_CORRUPTED})


@users.route('/account/user/ticket/remove', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
def remove_ticket_by_id():
    ticket_id = request.json.get('ticket_id')
    if ticket_id and ticket_id.isdigit():
        return AccountManager.remove_ticket_by_id(ticket_id)
    return CommonStates.DATA_CORRUPTED


@users.route('/account/user/tracking')
@AccountManager.login_required(roles=[UserRoles.USER])
def tracked_products():
    request_xhr_key = request.headers.get('X-Requested-With')
    tracked_products_items = current_user.get_my_tracked_products(MAX_ITEMS_PER_PAGE, get_page_number())
    if request_xhr_key and request_xhr_key == 'XMLHttpRequest':
        if len(tracked_products_items.items) != 0:
            return jsonify({'body': render_template('account/users/tracked-products/tracked-products-ajax.html',
                                                    ENOUGH_AVAILABLE=DbStates.ENOUGH_AVAILABLE,
                                                    calculate_price_function=Product.calculate_price,
                                                    tracked_products_items=tracked_products_items),
                            'navigation': render_template('base/helpers/include/page-navigation-include.html',
                                                          url='users.tracked_products',
                                                          paginated_object=tracked_products_items,
                                                          ajax=True)})
        return jsonify({'body': CommonStates.PAGE_DOESNT_EXIST})
    return render_template('account/users/tracked-products/tracked-products.html', webpage_title='حساب شما - لیست پیگیری',
                           calculate_price_function=Product.calculate_price,
                           ENOUGH_AVAILABLE=DbStates.ENOUGH_AVAILABLE,
                           tracked_products_items=tracked_products_items)


@users.route('/users/tracking/add', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
def add_to_tracker():
    if current_user.has_reached_max_tracking_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS

    product_id = request.json.get('product_id')
    amount = request.json.get('amount')
    unit = request.json.get('unit')

    if amount and isinstance(amount, str):
        index_of_dot = amount.find('.')
        if index_of_dot > -1:
            if len(amount[index_of_dot:]) > 3:
                return AccountStates.INVALID_AMOUNT
        amount = amount.replace(',', '')
        if is_float(amount):
            amount = float(amount)
            if amount > 0:
                if (product_id and unit) and (product_id.isdigit()) and ProductUnits.is_unit_valid(unit):
                    return AccountManager.add_to_tracker(product_id, amount, unit)
            return AccountStates.INVALID_AMOUNT
    return CommonStates.DATA_CORRUPTED


@users.route('/users/tracking/update', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
def update_tracker():
    if current_user.has_reached_max_tracking_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS
    tracker_id = request.json.get('tracker_id')
    new_amount = request.json.get('new_amount')
    new_unit = request.json.get('new_unit')
    if (tracker_id and isinstance(tracker_id, str) and tracker_id.isdigit() and new_amount and isinstance(new_amount, str)
            and isinstance(new_unit, str) and new_unit):
        if new_amount.replace('.', '', 1).isdigit():
            return AccountManager.update_tracker_by_id(int(tracker_id), float(new_amount), new_unit)
    return CommonStates.DATA_CORRUPTED


@users.route('/users/tracking/remove', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
def remove_from_tracker():
    if current_user.has_reached_max_tracking_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS
    tracker_id = request.json.get('tracker_id')
    if tracker_id and (isinstance(tracker_id, int) or (isinstance(tracker_id, str) and tracker_id.isdigit())):
        return AccountManager.remove_tracker_by_id(tracker_id)
    return CommonStates.DATA_CORRUPTED


@users.route('/users/cart/add', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
@disabled
def add_to_cart():
    if current_user.has_reached_max_cart_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS

    product_id = request.json.get('product_id')
    amount = request.json.get('amount')
    unit = request.json.get('unit')

    if amount and isinstance(amount, str):
        index_of_dot = amount.find('.')
        if index_of_dot > -1:
            if len(amount[index_of_dot:]) > 3:
                return AccountStates.INVALID_AMOUNT
        amount = amount.replace(',', '')
        if is_float(amount):
            amount = float(amount)
            if amount > 0:
                if (product_id and unit) and (product_id.isdigit()) and ProductUnits.is_unit_valid(unit):
                    return AccountManager.add_to_cart(product_id, amount, unit)
            return AccountStates.INVALID_AMOUNT
    return CommonStates.DATA_CORRUPTED


@users.route('/users/wishlist/add', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER], verified_user_only=True)
@only_xhr
@disabled
def add_to_wishlist():
    if current_user.has_reached_max_cart_changes(True):
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS

    cart_id = request.json.get('cart_id')

    if cart_id:
        if isinstance(cart_id, int):
            return AccountManager.add_to_wishlist(cart_id)
    return CommonStates.DATA_CORRUPTED


@users.route('/account/user/messages/update', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER])
@only_xhr
def account_user_messages_update():
    msg_id = request.json.get('msg_id')
    if msg_id and msg_id.isdigit():
        return AccountManager.update_message_state(msg_id)
    return CommonStates.DATA_CORRUPTED


@users.route('/verify-email-request', methods=['POST'])
@AccountManager.login_required(roles=[UserRoles.USER, UserRoles.ADMIN, UserRoles.OWNER])
def verify_email_request():
    # ask for update
    if current_user.has_reached_max_account_changes():
        return AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS
    EmailManager.send_verify_email_request()
    return 'یک ایمیل به همراه مراحل بعدی به ایمیل شما تا دقایقی دیگر ارسال خواهد شد.'


@users.route('/verify-email-request/<token>', methods=['GET', 'POST'])
def verify_email_token(token):
    user = User.verify_token(token, JWTRequest.VERIFY_EMAIL)
    if user is None:
        flash('این لینک یا اشتباه است یا اینکه دیگر معتبر نیست.', 'warning')
        return redirect(url_for('users.account_entry'))
    else:
        if user.has_reached_max_account_changes():
            flash(AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS, "warning")
        else:
            flash('ایمیل شما با موفیت اعتبار سنجی شد.', 'success')
            user.verify_email(True)
    if current_user.is_authenticated:
        if current_user.is_admin and user.is_admin:
            return redirect(url_for('admins.home', username=current_user.username))
        return redirect(url_for('users.home', username=current_user.username))
    return redirect(url_for('users.account_entry'))


@users.route('/reset-password-request', methods=['GET', 'POST'])
def reset_password_request():
    if current_user.is_authenticated:
        flash('لطفا اول از اکانت خود خارج شوید.', 'warning')
        return redirect(url_for('users.home', username=current_user.username))
    request_reset_password_form = RequestResetPasswordForm()
    if request_reset_password_form.validate_on_submit():
        user = User.query.filter_by(email=request_reset_password_form.email.data.strip()).first()
        if user:
            if user.has_reached_max_account_changes():
                flash(AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS, 'warning')
                return redirect(url_for('home.main'))
            EmailManager.send_reset_email(request_reset_password_form, user)
            flash('یک ایمیل به همراه مراحل بعدی به ایمیل شما تا دقایقی دیگر ارسال خواهد شد.', 'info')
            return redirect(url_for('users.account_entry'))
        else:
            flash('هیج کاربری با ایمیل داده پیدا نشد.', 'error')
            return redirect(url_for('users.reset_password_request'))
    return render_template('account/users/password-change/reset-password-request.html', webpage_title='باز نشانی رمز عبور',
                           request_reset_password_form=request_reset_password_form)


@users.route('/reset-password-request/<token>', methods=['GET', 'POST'])
def reset_password_token(token):
    if current_user.is_authenticated:
        flash('لطفا اول از اکانت خود خارج شوید.')
        return redirect(url_for('users.home', username=current_user.username))
    user = User.verify_token(token, JWTRequest.RESET_PASSWORD)
    if user is None:
        flash('این لینک یا اشتباه است یا اینکه دیگر معتبر نیست.', 'warning')
        return redirect(url_for('users.reset_password_request'))
    reset_password_form = ResetPasswordTokenForm()
    if reset_password_form.validate_on_submit():
        user.reset_failed_login_attempts()
        AccountManager.update_password(reset_password_form, user)
        flash('رمز عبور شما به روز رسانی شد، اکنون میتوانید وارد شوید.', 'success')
        return redirect(url_for('users.account_entry'))
    return render_template('account/users/password-change/reset-password-token.html', webpage_title='باز نشانی رمز عبور',
                           reset_password_form=reset_password_form)


@users.route('/unlock-account-request', methods=['GET', 'POST'])
def unlock_account_request():
    if current_user.is_authenticated:
        flash('لطفا اول از اکانت خود خارج شوید.', 'warning')
        return redirect(url_for('users.home', username=current_user.username))
    request_unlock_account_form = UnlockAccountForm()
    if request_unlock_account_form.validate_on_submit():
        user = User.query.filter_by(email=request_unlock_account_form.email.data.strip()).first()
        if user:
            if user.has_reached_max_account_changes():
                flash(AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS, 'warning')
                return redirect(url_for('home.account_entry'))
            EmailManager.send_unlock_account_email(request_unlock_account_form, user)
            flash('یک ایمیل به همراه مراحل بعدی به ایمیل شما تا دقایقی دیگر ارسال خواهد شد.', 'info')
            return redirect(url_for('users.account_entry'))
        else:
            flash('هیج کاربری با ایمیل داده پیدا نشد.', 'error')
            return redirect(url_for('users.unlock_account_request'))
    return render_template('account/users/unlock-account/unlock-account-request.html', webpage_title='باز کردن حساب',
                           request_unlock_account_form=request_unlock_account_form)


@users.route('/unlock-account-request/<token>', methods=['GET', 'POST'])
def unlock_account_token(token):
    if current_user.is_authenticated:
        flash('لطفا اول از اکانت خود خارج شوید.')
        return redirect(url_for('users.home', username=current_user.username))
    user = User.verify_token(token, JWTRequest.UNLOCK_ACCOUNT)
    if user is None:
        flash('این لینک یا اشتباه است یا اینکه دیگر معتبر نیست.', 'warning')
        return redirect(url_for('users.unlock_account_token'))
    if user.has_reached_max_account_changes():
        flash(AccountStates.REACHED_MAX_REQUESTS_SIX_HOURS, 'warning t-10')
        return redirect(url_for('users.account_entry'))
    user.reset_failed_login_attempts(True)
    flash('حساب شما باز شد. هم اکنون می توانید وارد شوید.', 'success')
    return redirect(url_for('users.account_entry'))


@users.route('/account/logout')
@AccountManager.login_required(roles=[UserRoles.USER])
def logout():
    logout_user()
    return redirect(url_for('users.account_entry'))
